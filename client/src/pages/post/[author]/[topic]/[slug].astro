---
import type { GetStaticPaths } from "astro";
import { useSanityClient } from "astro-sanity";
import type { IAuthor, IPost } from "../../../../types";
import Header from "../../../../components/astro/Header.astro";
import Navbar from "../../../../components/astro/Navbar.astro";
import { navLnks } from "../../../index.astro";
import styles from "../../../../styles/pages/post/[author]/[topic]/[slug].module.scss";
import PostBanner from "../../../../components/astro/PostBanner.astro"

export type TSlug = {
    current: string;
}
interface ITopic {
    name: string;
    slug: TSlug;
}
interface IAuthorWithPosts extends IAuthor {
    posts: (IPost & {topic: ITopic})[]
}

export async function getStaticPaths() {
    const sanity = useSanityClient();
    
    const authors: IAuthorWithPosts[] = await sanity.fetch<IAuthorWithPosts[]>(`*[_type == "author"] {
        name,
        slug,
        bio,
        _id,
        "posts": *[_type=="post" && references(^._id)] {slug, body, title, mainImage {asset->}, topic->}
    }`);
    console.log(authors.forEach((author) => {author.posts.forEach((ps) => {console.log(ps.mainImage?.asset?.url)})}));

    // console.log(authors.map((author) => {
    //     return author.posts.map((post) => ({...post, author: author}))
    // }).flatMap((author_) => author_));
    const posts = authors.map((author) => {
        const {posts: author_posts, ...author_include} = author;
        return author.posts.map((post) => ({...post, author: author_include}))
    }).flatMap((author_) => author_);

    return posts.map((post) => {
        return {
            params: {
                author: post.author.slug.current,
                topic: post.topic.slug.current,
                slug: post.slug.current
            },
            props: {
                post
            }
        }
    })
    
    // return [
    //     {
    //         params: {
    //             author: 'clive',
    //             topic: 'frontend-development',
    //             slug: 'introduction-to-nextjs'
    //         }
    //     }
    // ];
	};
interface Props {
    post: (IPost & {topic: ITopic})
}
const { post } = Astro.props;
---


<html lang="en">
	<Header title="Home" description="Zenblog landing page" />
	<body>
		<main class={`app ${styles.app}`}>
			<div class={`content ${styles.content}`}>
				<Navbar links={navLnks} />
				<PostBanner bgImgURL={`${post.mainImage?.asset?.url}`} post={post} />
				<!-- <footer>
					
				</footer> -->
			</div>
		</main>
	</body>
</html>
