---
import Header from "../components/astro/Header.astro";
import Navbar from "../components/astro/Navbar.astro";
import "../styles/styles.scss";
import styles from "../styles/pages/index.module.scss";
import type { IAuthor, NavLink, ITopic, TSlug } from "../types";
import PublicationTag from "../components/astro/PublicationTag.astro";
import TopicBadge from "../components/astro/TopicBadge.astro";
import PostCard from "../components/astro/PostCard.astro";
import { useSanityClient } from "astro-sanity";
import { ViewTransitions } from "astro:transitions";

export const navLnks: NavLink[] = [
	{
		label: "Home",
		linkTo: "/",
	},
	{
		label: "About",
		linkTo: "#"
	},
	{
		label: "Resources",
		linkTo: "#",
		isParent: {
			status: true,
			children: [
				{
					label: "Docs",
					linkTo: "#"
				},
				{
					label: "Authors",
					linkTo: "#"
				}
			]
		}
	}
];
const dayPostData = {
	publisher: {
		name: "Olivia Rhye"
	},
	publicationDate: new Date("20 Jan 2022").toDateString(),
	title: "UX review presentations",
	description: "How do you create compelling presentations that wow your colleagues and impress your managers?",
	img: "/images/pexels-аліна-скорженко-16839579.jpg",
	tags: [
		{
			title: "Design"
		},
		{
			title: "Research"
		},
		{
			title: "Presentation"
		},
	],
	author: {
		name: 'Clive',
		bio: [
			{
			style: 'normal',
			_key: '5323c47a1466',
			markDefs: [],
			children: [Array],
			_type: 'block'
			}
		].toString(),
		_id: 'a3e4cedc-ae0b-4f4f-9c90-e06c4b740078',
		profession: 'Frontend Developer/ student',
		_createdAt: '2023-05-16T07:13:01Z',
		_type: 'author',
		_rev: 'iU4xU8SeHwaDO0k2e0HAZ9',
		_updatedAt: '2023-05-16T07:27:54Z',
		slug: { current: 'clive', _type: 'slug' },
		image: "",
		title: ""
	}
}
interface IPostRecData {
    publication: {
        name: string,
        date: Date,
		author: IAuthor
    };
    title: string;
    briefDescription: string,
    tags?: string[],
	posterURL: string,
	topic: ITopic,
	slug: TSlug
}
let postRecommendationsData: IPostRecData[]  = [
	// {
	// 	publication: {
	// 		name: "Phoenix Baker",
	// 		date: new Date("19 Jan 2022")
	// 	},
	// 	title: "Migrating to Linear 101",
	// 	briefDescription: "Linear helps streamline software projects, sprints, tasks and bug tracking. Here's how to get started.",
	// 	topic: "",
	// 	tags: ["Product", "Tools", "Saas"],
	// 	posterURL: 'https://source.unsplash.com/random'
	// },
];

const sanity = useSanityClient();
interface IAvailablePosts {
	title: string;
	mainImage: {asset: {url: string}};
	publishedAt: Date;
	slug: TSlug;
	author: IAuthor;
	topic: ITopic;
	body: object[];
}
const availablePosts: IAvailablePosts[] = await sanity.fetch<IAvailablePosts[]>(`*[_type=="post"]{title, mainImage {asset->}, publishedAt, body, slug, topic->, author->}`);
// console.log(availablePosts.forEach((pst) => {console.log(pst.author)}));
postRecommendationsData = availablePosts.map<IPostRecData>((post) => {
	return {
		publication: {
			name: post.author.name,
			date: post.publishedAt,
			author: post.author
		},
		title: post.title,
		briefDescription: post.slug.current,
		tags: [post.topic.slug.current],
		topic: post.topic,
		posterURL: post?.mainImage?.asset?.url ?? "",
		slug: post.slug
	}
});

---

<html lang="en">
	<Header title="Home" description="Zenblog landing page">
		<ViewTransitions />
	</Header>
	<body>
		<main class={`app ${styles.app}`}>
			<span class="diffuser_spot"></span>
			<span class="diffuser_spot"></span>
			<span class="diffuser_spot"></span>
			<div class={`content ${styles.content}`}>
				<Navbar links={navLnks} />
				<section id="home" class={`${styles.home_section} ${styles.home_greeting_section}`}>
					<div class={styles.hg_banner}>
						<div class={styles.hg_strip}>
							<h1>Writings from our team</h1>
							<span data-elm-type="burst-icon"><img src="/team_ender_ill.png" alt="_" /></span>
						</div>
						<div class={styles.hg_strip}>
							<h3>The latest industry news, interviews, technologies and resources.</h3>
						</div>
					</div>
					<div class={styles.hg_poster}>
						<div class={styles.hg_poster_content} style={`background-image: url('${dayPostData.img}')`}>
							<div class={styles.hg_poster_filter_overlay}></div>
							<div class={styles.hg_poster_info}>
								<div class={styles.hg_poster_info_strip}>
									<PublicationTag name={dayPostData.publisher.name} author={dayPostData.author} date={dayPostData.publicationDate} />
								</div>
								<div class={styles.hg_poster_info_strip}>
									<h2>{dayPostData.title}</h2>
								</div>
								<div class={styles.hg_poster_info_strip}>
									<h4>{dayPostData.description}</h4>
								</div>
								<div class={styles.hg_poster_info_strip}>
									{dayPostData.tags.map((tag_) => <TopicBadge label={tag_.title} />)}
								</div>
							</div>
						</div>
					</div>
				</section>
				<section id="recent_posts_title" class={styles.section_header}>
					<h2>Recent Posts</h2>
				</section>
				<section id="cards" class={styles.post_cards_wrapper}>
					<!-- display post cards -->
					{postRecommendationsData.map((pst_) => <PostCard {...pst_} />)}
				</section>
				<footer>
					
				</footer>
			</div>
		</main>
	</body>
</html>
